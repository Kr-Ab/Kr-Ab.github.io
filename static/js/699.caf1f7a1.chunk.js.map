{"version":3,"file":"static/js/699.caf1f7a1.chunk.js","mappings":"0KAIe,SAASA,EAAMC,GAAc,IAAb,OAAEC,GAAQD,EACvC,MAAME,GAAaC,EAAAA,EAAAA,KACnB,OACEC,EAAAA,EAAAA,MAAA,WAASC,GAAG,SAASC,IAAKJ,EAAWK,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaF,SACzBG,OAAOC,KAAKV,GAAQW,IAAI,CAACC,EAAOC,KAC/BV,EAAAA,EAAAA,MAAA,OAAKK,UAAU,aAAYF,SAAA,EACzBH,EAAAA,EAAAA,MAAA,QAAMK,UAAU,cAAaF,SAAA,CAAEM,EAAM,QACrCL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYF,SAAEN,EAAOY,GAAOE,KAAK,UAFlBD,QAQ3C,C,6CCZe,SAASX,IACtB,MAAMD,GAAac,EAAAA,EAAAA,UAgBnB,OAfAC,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAUhB,EAAWiB,QAC3B,IAAKD,EAAS,OACd,MAAME,EAAW,IAAIC,OAAOC,qBAC1BtB,IAAc,IAAZuB,GAAMvB,EACFuB,EAAMC,iBACRN,EAAQO,UAAUC,IAAI,WACtBN,EAASO,eAGb,CAAEC,UAAW,MAGf,OADAR,EAASS,QAAQX,GACV,IAAME,EAASO,cACrB,IACIzB,CACT,C","sources":["components/Skills.js","components/useSectionVisible.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport useSectionVisible from './useSectionVisible';\n\nexport default function Skills({ skills }) {\n  const sectionRef = useSectionVisible();\n  return (\n    <section id=\"skills\" ref={sectionRef}>\n      <h3>Skills</h3>\n      <div className=\"skills-grid\">\n        {Object.keys(skills).map((group, i) => (\n          <div className=\"skill-card\" key={i}>\n            <span className=\"skill-title\">{group}:</span>\n            <span className=\"skill-list\">{skills[group].join(', ')}</span>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n\nSkills.propTypes = {\n  skills: PropTypes.objectOf(PropTypes.array).isRequired,\n};\n","import { useEffect, useRef } from 'react';\n\n/**\n * Custom hook to add 'visible' class to a section when it enters the viewport.\n * Uses IntersectionObserver for better performance and accessibility.\n * Returns a ref to be attached to the section element.\n */\nexport default function useSectionVisible() {\n  const sectionRef = useRef();\n  useEffect(() => {\n    const section = sectionRef.current;\n    if (!section) return;\n    const observer = new window.IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          section.classList.add('visible');\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.15 }\n    );\n    observer.observe(section);\n    return () => observer.disconnect();\n  }, []);\n  return sectionRef;\n}\n"],"names":["Skills","_ref","skills","sectionRef","useSectionVisible","_jsxs","id","ref","children","_jsx","className","Object","keys","map","group","i","join","useRef","useEffect","section","current","observer","window","IntersectionObserver","entry","isIntersecting","classList","add","disconnect","threshold","observe"],"sourceRoot":""}