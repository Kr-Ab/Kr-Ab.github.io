{"version":3,"file":"static/js/284.0089ef6a.chunk.js","mappings":"0KAIe,SAASA,EAAKC,GAAa,IAAZ,MAAEC,GAAOD,EACrC,MAAME,GAAaC,EAAAA,EAAAA,KACnB,OACEC,EAAAA,EAAAA,MAAA,WAASC,GAAG,QAAQC,IAAKJ,EAAWK,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,aAAYF,SAAEN,MAGjC,C,6CCLe,SAASE,IACtB,MAAMD,GAAaQ,EAAAA,EAAAA,UAgBnB,OAfAC,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAUV,EAAWW,QAC3B,IAAKD,EAAS,OACd,MAAME,EAAW,IAAIC,OAAOC,qBAC1BhB,IAAc,IAAZiB,GAAMjB,EACFiB,EAAMC,iBACRN,EAAQO,UAAUC,IAAI,WACtBN,EAASO,eAGb,CAAEC,UAAW,MAGf,OADAR,EAASS,QAAQX,GACV,IAAME,EAASO,cACrB,IACInB,CACT,C","sources":["components/About.js","components/useSectionVisible.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport useSectionVisible from './useSectionVisible';\n\nexport default function About({ about }) {\n  const sectionRef = useSectionVisible();\n  return (\n    <section id=\"about\" ref={sectionRef}>\n      <h3>About Me</h3>\n      <p className=\"about-text\">{about}</p>\n    </section>\n  );\n}\n\nAbout.propTypes = {\n  about: PropTypes.string.isRequired,\n};\n","import { useEffect, useRef } from 'react';\n\n/**\n * Custom hook to add 'visible' class to a section when it enters the viewport.\n * Uses IntersectionObserver for better performance and accessibility.\n * Returns a ref to be attached to the section element.\n */\nexport default function useSectionVisible() {\n  const sectionRef = useRef();\n  useEffect(() => {\n    const section = sectionRef.current;\n    if (!section) return;\n    const observer = new window.IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          section.classList.add('visible');\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.15 }\n    );\n    observer.observe(section);\n    return () => observer.disconnect();\n  }, []);\n  return sectionRef;\n}\n"],"names":["About","_ref","about","sectionRef","useSectionVisible","_jsxs","id","ref","children","_jsx","className","useRef","useEffect","section","current","observer","window","IntersectionObserver","entry","isIntersecting","classList","add","disconnect","threshold","observe"],"sourceRoot":""}