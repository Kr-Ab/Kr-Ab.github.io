{"version":3,"file":"static/js/416.b4862bf3.chunk.js","mappings":"oJACA,SAAgB,QAAU,yBAAyB,cAAgB,+BAA+B,QAAU,0B,aCI7F,SAASA,EAAOC,GAAsC,IAArC,GAAEC,EAAE,MAAEC,EAAK,SAAEC,EAAQ,UAAEC,GAAWJ,EAChE,MAAMK,GAAaC,EAAAA,EAAAA,GAAkBC,EAAOC,SAEtCC,EAAoB,CAACF,EAAOG,QAASN,GAAWO,OAAOC,SAASC,KAAK,KAC3E,OACEC,EAAAA,EAAAA,MAAA,WAASb,GAAIA,EAAIc,IAAKV,EAAYD,UAAWK,EAAkBN,SAAA,CAC5DD,IAASc,EAAAA,EAAAA,KAAA,MAAAb,SAAKD,IACdC,IAGP,C,oDCdA,SAAgB,QAAU,4BAA4B,QAAU,4BAA4B,cAAgB,kCAAkC,QAAU,4BAA4B,QAAU,4BAA4B,UAAY,+B,+BCKtO,SAASc,EAAcjB,GAAW,IAAV,IAAEkB,GAAKlB,EAC7B,MAAMmB,GAAUb,EAAAA,EAAAA,GAAkBC,EAAOC,SACzC,OACEM,EAAAA,EAAAA,MAAA,OAAKC,IAAKI,EAASf,UAAS,GAAAgB,OAAKb,EAAOc,SAAUlB,SAAA,EAChDW,EAAAA,EAAAA,MAAA,MAAAX,SAAA,CACGe,EAAII,SAAS,KAACR,EAAAA,EAAAA,MAAA,QAAMV,UAAWG,EAAOgB,UAAUpB,SAAA,CAAC,KAAGe,EAAIM,eAE3DV,EAAAA,EAAAA,MAAA,QAAMV,UAAWG,EAAOkB,QAAQtB,SAAA,CAC7Be,EAAIQ,SAAS,MAAIR,EAAIS,aAExBX,EAAAA,EAAAA,KAAA,MAAAb,SACGe,EAAIU,iBAAiBC,IAAI,CAACC,EAAGC,KAC5Bf,EAAAA,EAAAA,KAAA,MAAAb,SAAa2B,GAAJC,QAKnB,CAYe,SAASC,EAAUC,GAAkB,IAAjB,WAAEC,GAAYD,EAC/C,OACEjB,EAAAA,EAAAA,KAACjB,EAAAA,EAAO,CAACE,GAAG,aAAaC,MAAM,aAAYC,UACzCa,EAAAA,EAAAA,KAAA,OAAKZ,UAAWG,EAAO4B,QAAQhC,SAC5B+B,EAAWL,IAAI,CAACX,EAAKkB,KACpBpB,EAAAA,EAAAA,KAACC,EAAc,CAACC,IAAKA,GAAUkB,OAKzC,C,6CCvCe,SAAS9B,EAAkB+B,GACxC,MAAMhC,GAAaiC,EAAAA,EAAAA,UAgBnB,OAfAC,EAAAA,EAAAA,WAAU,KACR,MAAM7B,EAAUL,EAAWmC,QAC3B,IAAK9B,EAAS,OACd,MAAM+B,EAAW,IAAIC,OAAOC,qBAC1B3C,IAAc,IAAZ4C,GAAM5C,EACF4C,EAAMC,gBAAkBR,IAC1B3B,EAAQoC,UAAUC,IAAIV,GACtBI,EAASO,eAGb,CAAEC,UAAW,MAGf,OADAR,EAASS,QAAQxC,GACV,IAAM+B,EAASO,cACrB,CAACX,IACGhC,CACT,C","sources":["webpack://kr-ab.github.io/./src/components/Section.module.css?63a8","components/Section.js","webpack://kr-ab.github.io/./src/components/Experience.module.css?e4c7","components/Experience.js","components/useSectionVisible.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__06lK0\",\"fadeInSection\":\"Section_fadeInSection__crWe6\",\"visible\":\"Section_visible__0rKTe\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useSectionVisible from './useSectionVisible';\nimport styles from './Section.module.css';\n\nexport default function Section({ id, title, children, className }) {\n  const sectionRef = useSectionVisible(styles.visible);\n  // Always apply both the module section class and any additional className\n  const combinedClassName = [styles.section, className].filter(Boolean).join(' ');\n  return (\n    <section id={id} ref={sectionRef} className={combinedClassName}>\n      {title && <h3>{title}</h3>}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"expGrid\":\"Experience_expGrid__KxzOK\",\"expCard\":\"Experience_expCard__APQFe\",\"fadeInSection\":\"Experience_fadeInSection__wVznm\",\"visible\":\"Experience_visible__K0O1l\",\"expMeta\":\"Experience_expMeta__GV9v8\",\"atCompany\":\"Experience_atCompany__X4C1q\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Experience.module.css';\nimport Section from './Section';\nimport useSectionVisible from './useSectionVisible';\n\nfunction ExperienceCard({ exp }) {\n  const cardRef = useSectionVisible(styles.visible);\n  return (\n    <div ref={cardRef} className={`${styles.expCard}`}>\n      <h4>\n        {exp.jobTitle} <span className={styles.atCompany}>@ {exp.company}</span>\n      </h4>\n      <span className={styles.expMeta}>\n        {exp.duration} | {exp.location}\n      </span>\n      <ul>\n        {exp.responsibilities.map((r, j) => (\n          <li key={j}>{r}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nExperienceCard.propTypes = {\n  exp: PropTypes.shape({\n    jobTitle: PropTypes.string.isRequired,\n    company: PropTypes.string.isRequired,\n    duration: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    responsibilities: PropTypes.arrayOf(PropTypes.string).isRequired,\n  }).isRequired,\n};\n\nexport default function Experience({ experience }) {\n  return (\n    <Section id=\"experience\" title=\"Experience\">\n      <div className={styles.expGrid}>\n        {experience.map((exp, i) => (\n          <ExperienceCard exp={exp} key={i} />\n        ))}\n      </div>\n    </Section>\n  );\n}\n\nExperience.propTypes = {\n  experience: PropTypes.arrayOf(\n    PropTypes.shape({\n      jobTitle: PropTypes.string.isRequired,\n      company: PropTypes.string.isRequired,\n      duration: PropTypes.string.isRequired,\n      location: PropTypes.string.isRequired,\n      responsibilities: PropTypes.arrayOf(PropTypes.string).isRequired,\n    })\n  ).isRequired,\n};\n","import { useEffect, useRef } from 'react';\n\n/**\n * Custom hook to add a class to a section when it enters the viewport.\n * Accepts a className (from CSS module) to add when visible.\n */\nexport default function useSectionVisible(visibleClass) {\n  const sectionRef = useRef();\n  useEffect(() => {\n    const section = sectionRef.current;\n    if (!section) return;\n    const observer = new window.IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && visibleClass) {\n          section.classList.add(visibleClass);\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.15 }\n    );\n    observer.observe(section);\n    return () => observer.disconnect();\n  }, [visibleClass]);\n  return sectionRef;\n}\n"],"names":["Section","_ref","id","title","children","className","sectionRef","useSectionVisible","styles","visible","combinedClassName","section","filter","Boolean","join","_jsxs","ref","_jsx","ExperienceCard","exp","cardRef","concat","expCard","jobTitle","atCompany","company","expMeta","duration","location","responsibilities","map","r","j","Experience","_ref2","experience","expGrid","i","visibleClass","useRef","useEffect","current","observer","window","IntersectionObserver","entry","isIntersecting","classList","add","disconnect","threshold","observe"],"sourceRoot":""}